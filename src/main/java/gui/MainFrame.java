package gui;

import model.User;
import model.User.UserRole;
import service.UserService;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;

/**
 * C·ª≠a s·ªï ch√≠nh c·ªßa ·ª©ng d·ª•ng
 */
public class MainFrame extends JFrame {
    private User currentUser;
    private UserService userService;
    private JTabbedPane tabbedPane;
    private BookManagementPanel bookPanel;
    private UserManagementPanel userPanel;
    
    public MainFrame(User user) {
        this.currentUser = user;
        this.userService = new UserService();
        
        initComponents();
        setupLayout();
        setupMenuBar();
        setupEvents();
        
        showWelcomeMessage();
    }
    
    private void initComponents() {
        setTitle("Qu·∫£n l√Ω C·ª≠a h√†ng S√°ch - " + currentUser.getFullName() + 
                " (" + currentUser.getRole().getDisplayName() + ")");
        setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        setSize(1200, 800);
        setLocationRelativeTo(null);
        
        // T·∫°o tabbed pane
        tabbedPane = new JTabbedPane();
        tabbedPane.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        
        // Panel qu·∫£n l√Ω s√°ch
        bookPanel = new BookManagementPanel(currentUser);
        tabbedPane.addTab("üìö Qu·∫£n l√Ω S√°ch", bookPanel);
        
        // Panel qu·∫£n l√Ω ng∆∞·ªùi d√πng (ch·ªâ admin)
        if (currentUser.getRole() == UserRole.ADMIN) {
            userPanel = new UserManagementPanel(currentUser);
            tabbedPane.addTab("üë• Qu·∫£n l√Ω Ng∆∞·ªùi d√πng", userPanel);
        }
    }
    
    private void setupLayout() {
        setLayout(new BorderLayout());
        
        // Panel header
        JPanel headerPanel = createHeaderPanel();
        add(headerPanel, BorderLayout.NORTH);
        
        // Panel ch√≠nh
        add(tabbedPane, BorderLayout.CENTER);
        
        // Panel footer
        JPanel footerPanel = createFooterPanel();
        add(footerPanel, BorderLayout.SOUTH);
    }
    
    private JPanel createHeaderPanel() {
        JPanel panel = new JPanel(new BorderLayout());
        panel.setBackground(new Color(0, 123, 255));
        panel.setBorder(BorderFactory.createEmptyBorder(10, 15, 10, 15));
        
        // Logo v√† ti√™u ƒë·ªÅ
        JLabel lblTitle = new JLabel("üìö H·ªÜ TH·ªêNG QU·∫¢N L√ù C·ª¨A H√ÄNG S√ÅCH");
        lblTitle.setFont(new Font("Segoe UI", Font.BOLD, 20));
        lblTitle.setForeground(Color.WHITE);
        
        // Th√¥ng tin ng∆∞·ªùi d√πng
        JLabel lblUser = new JLabel("Xin ch√†o, " + currentUser.getFullName() + 
                " | " + currentUser.getRole().getDisplayName());
        lblUser.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        lblUser.setForeground(Color.WHITE);
        
        panel.add(lblTitle, BorderLayout.WEST);
        panel.add(lblUser, BorderLayout.EAST);
        
        return panel;
    }
    
    private JPanel createFooterPanel() {
        JPanel panel = new JPanel(new FlowLayout(FlowLayout.CENTER));
        panel.setBackground(new Color(248, 249, 250));
        panel.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
        
        JLabel lblFooter = new JLabel("¬© 2025 H·ªá th·ªëng Qu·∫£n l√Ω C·ª≠a h√†ng S√°ch - Phi√™n b·∫£n 1.0");
        lblFooter.setFont(new Font("Segoe UI", Font.PLAIN, 12));
        lblFooter.setForeground(new Color(108, 117, 125));
        
        panel.add(lblFooter);
        return panel;
    }
    
    private void setupMenuBar() {
        JMenuBar menuBar = new JMenuBar();
        
        // Menu H·ªá th·ªëng
        JMenu systemMenu = new JMenu("H·ªá th·ªëng");
        systemMenu.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        
        // ƒê·ªïi m·∫≠t kh·∫©u
        JMenuItem changePasswordItem = new JMenuItem("ƒê·ªïi m·∫≠t kh·∫©u");
        changePasswordItem.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        changePasswordItem.addActionListener(e -> showChangePasswordDialog());
        systemMenu.add(changePasswordItem);
        
        systemMenu.addSeparator();
        
        // ƒêƒÉng xu·∫•t
        JMenuItem logoutItem = new JMenuItem("ƒêƒÉng xu·∫•t");
        logoutItem.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        logoutItem.addActionListener(e -> logout());
        systemMenu.add(logoutItem);
        
        // Tho√°t
        JMenuItem exitItem = new JMenuItem("Tho√°t");
        exitItem.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        exitItem.addActionListener(e -> exitApplication());
        systemMenu.add(exitItem);
        
        // Menu Tr·ª£ gi√∫p
        JMenu helpMenu = new JMenu("Tr·ª£ gi√∫p");
        helpMenu.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        
        JMenuItem aboutItem = new JMenuItem("V·ªÅ ch∆∞∆°ng tr√¨nh");
        aboutItem.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        aboutItem.addActionListener(e -> showAboutDialog());
        helpMenu.add(aboutItem);
        
        menuBar.add(systemMenu);
        menuBar.add(helpMenu);
        
        setJMenuBar(menuBar);
    }
    
    private void setupEvents() {
        // X·ª≠ l√Ω khi ƒë√≥ng c·ª≠a s·ªï
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                exitApplication();
            }
        });
    }
    
    private void showWelcomeMessage() {
        SwingUtilities.invokeLater(() -> {
            String message = "Ch√†o m·ª´ng " + currentUser.getFullName() + 
                    " ƒë·∫øn v·ªõi h·ªá th·ªëng qu·∫£n l√Ω c·ª≠a h√†ng s√°ch!";
            
            JOptionPane.showMessageDialog(this, message, "Ch√†o m·ª´ng", 
                    JOptionPane.INFORMATION_MESSAGE);
        });
    }
    
    private void showChangePasswordDialog() {
        JDialog dialog = new JDialog(this, "ƒê·ªïi m·∫≠t kh·∫©u", true);
        dialog.setSize(400, 250);
        dialog.setLocationRelativeTo(this);
        
        JPanel panel = new JPanel(new GridBagLayout());
        panel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
        
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(5, 5, 5, 5);
        
        // M·∫≠t kh·∫©u c≈©
        gbc.gridx = 0; gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        panel.add(new JLabel("M·∫≠t kh·∫©u c≈©:"), gbc);
        
        JPasswordField txtOldPassword = new JPasswordField(20);
        gbc.gridx = 1; gbc.gridy = 0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel.add(txtOldPassword, gbc);
        
        // M·∫≠t kh·∫©u m·ªõi
        gbc.gridx = 0; gbc.gridy = 1;
        gbc.anchor = GridBagConstraints.WEST;
        panel.add(new JLabel("M·∫≠t kh·∫©u m·ªõi:"), gbc);
        
        JPasswordField txtNewPassword = new JPasswordField(20);
        gbc.gridx = 1; gbc.gridy = 1;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel.add(txtNewPassword, gbc);
        
        // X√°c nh·∫≠n m·∫≠t kh·∫©u
        gbc.gridx = 0; gbc.gridy = 2;
        gbc.anchor = GridBagConstraints.WEST;
        panel.add(new JLabel("X√°c nh·∫≠n:"), gbc);
        
        JPasswordField txtConfirmPassword = new JPasswordField(20);
        gbc.gridx = 1; gbc.gridy = 2;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel.add(txtConfirmPassword, gbc);
        
        // Buttons
        JPanel buttonPanel = new JPanel(new FlowLayout());
        JButton btnSave = new JButton("L∆∞u");
        JButton btnCancel = new JButton("H·ªßy");
        
        btnSave.addActionListener(e -> {
            String oldPassword = new String(txtOldPassword.getPassword());
            String newPassword = new String(txtNewPassword.getPassword());
            String confirmPassword = new String(txtConfirmPassword.getPassword());
            
            if (oldPassword.isEmpty() || newPassword.isEmpty() || confirmPassword.isEmpty()) {
                JOptionPane.showMessageDialog(dialog, "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!");
                return;
            }
            
            if (!newPassword.equals(confirmPassword)) {
                JOptionPane.showMessageDialog(dialog, "M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp!");
                return;
            }
            
            if (userService.changePassword(currentUser.getUserId(), oldPassword, newPassword)) {
                JOptionPane.showMessageDialog(dialog, "ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng!");
                dialog.dispose();
            } else {
                JOptionPane.showMessageDialog(dialog, "ƒê·ªïi m·∫≠t kh·∫©u th·∫•t b·∫°i!");
            }
        });
        
        btnCancel.addActionListener(e -> dialog.dispose());
        
        buttonPanel.add(btnSave);
        buttonPanel.add(btnCancel);
        
        gbc.gridx = 0; gbc.gridy = 3;
        gbc.gridwidth = 2;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(15, 5, 5, 5);
        panel.add(buttonPanel, gbc);
        
        dialog.add(panel);
        dialog.setVisible(true);
    }
    
    private void logout() {
        int option = JOptionPane.showConfirmDialog(this, 
                "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ƒëƒÉng xu·∫•t?", 
                "X√°c nh·∫≠n", 
                JOptionPane.YES_NO_OPTION);
        
        if (option == JOptionPane.YES_OPTION) {
            dispose();
            SwingUtilities.invokeLater(() -> {
                new LoginFrame().setVisible(true);
            });
        }
    }
    
    private void exitApplication() {
        int option = JOptionPane.showConfirmDialog(this, 
                "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën tho√°t ·ª©ng d·ª•ng?", 
                "X√°c nh·∫≠n", 
                JOptionPane.YES_NO_OPTION);
        
        if (option == JOptionPane.YES_OPTION) {
            System.exit(0);
        }
    }
    
    private void showAboutDialog() {
        String message = "<html><center>" +
                "<h2>H·ªá th·ªëng Qu·∫£n l√Ω C·ª≠a h√†ng S√°ch</h2>" +
                "<p>Phi√™n b·∫£n: 1.0</p>" +
                "<p>Ph√°t tri·ªÉn b·∫±ng Java Swing</p>" +
                "<p>C∆° s·ªü d·ªØ li·ªáu: MySQL</p>" +
                "<p>¬© 2025 - ƒê·ªì √°n L·∫≠p tr√¨nh Java</p>" +
                "</center></html>";
        
        JOptionPane.showMessageDialog(this, message, "V·ªÅ ch∆∞∆°ng tr√¨nh", 
                JOptionPane.INFORMATION_MESSAGE);
    }
}
